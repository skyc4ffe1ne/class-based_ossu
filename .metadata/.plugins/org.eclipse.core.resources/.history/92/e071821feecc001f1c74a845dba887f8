import tester.*;

interface IShape
{
  double distanceToOrigin();
  double area();
  IShape grow(int inc);
  boolean isBiggerThan(IShape that);
}

// to represent 2-d point by Cartesian coordinate  
class CartPT{
    int x;
    int y;
    
    CartPT(int x, int y){
     this.x = x; 
     this.y = y; 
    }
}



class Circle implements IShape
{
  CartPT x;
  CartPT y;
  int radius;
  String color;
 
  Circle(CartPT x, CartPT y,int radius,String color)
  {
   this.x = x; 
   this.y = y; 
   this.radius = radius; 
   this.color = color; 
  }
  
  public double distanceToOrigin() {
   return Math.sqrt(this.x * this.x + this.y * this.y) - this.radius;
  }
  
  public double area() {
   return Math.PI * this.radius * this.radius;
  }
  
  public IShape grow(int inc) {
   return new Circle((this.x + inc),(this.y + inc),this.radius,this.color);
  }
 

  public boolean isBiggerThan(IShape that) {
    return this.area() > that.area();
  }
  
}

class Square implements IShape
{
  int x;
  int y;
  int size;
  String color;
 
  Square(int x, int y, int size, String color)
  {
   this.x = x; 
   this.y = y; 
   this.size = size;
   this.color = color; 
  }
  

  public double distanceToOrigin() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }

  public double area() {
   return this.size * this.size;
  }
  
  public IShape grow(int inc) {
   return new Square((this.x + inc),(this.y + inc),this.size,this.color);
  }
  
  public boolean isBiggerThan(IShape that) {
    return this.area() > that.area();
  }
  
}


class ExamplesShape{
  ExamplesShape(){}
  
  IShape c1 = new Circle(50,50,10,"red");

  IShape s1 = new Square(50,50,30,"red");
  
  boolean testIShapeArea(Tester t) {
    return t.checkInexact(this.c1.area(), 314.15,0.01) 
        && t.checkInexact(this.s1.area(), 900.0, 0.01);
  }
  
}


